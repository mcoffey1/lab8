Matthew Coffey
CSE 201311
Lab 8 Report

	When the executable playlife is run the user can either choose to run in manual or batch mode. This is decided by whether or not the user provides an additional argument when calling the executable. If no argument is provided then manual operation ensues, and the user faces a text menu that allows her to add or remove life from a a 40x40 board or advance the board by a single generation or continously. Every time the board is updated a new version is displayed using 'X' to indicate live cells and lines to indicate the boards boundaries. When the board is advanced it follows the rules of Conway's game of life meaning certain cells will either generate or die as a result of neighboring cell populations.
	 If a readable file is provided as the additional argument then that file will be read as if it were commands from the menu that the users could use in manual mode. If the file is unable to be accessed the program fails and returns an error.
	The main bulk of this program is contained with the Lifeboard class which is a 42 x 42 char array (the extra two rows and columns are to draw the boundaries). However, the size can be changed by modifying the constant in Lifeboard.h. The class contains methods that allow it add or remove life, as well as get the status of a particular cell or set another board to match the current one entirely. This last method is called by the method advance which uses two boards: one to calculate whether a cell lives or dies and another to store the results. This calculation is done via a series of four nested four loops. The first two traverse the rows and columns of the board, the second two examine the neighboring cells. The advance method also calls display which prints out the characters of the array to display the board on screen. Finally the play method provides a continous loop of advancing the board, displaying the board, clearing the console and waiting to provide the look of animation. 
	The driver for the program life.cpp took in the number of arguments passed to the console as an int and stored the arguments a a vector of strings. It used that int to determine whether to run in manual or batch mode and then used the text file stored as a string to work with ifstream to read in commands. In manual mode the text menu is a while loop that asks the user to input new commands until the press q to quit. All of the commands presented then call a corresponding method of the Lifeboard class.
	This program was test both in manual mode by putting in different commands and coordinates for life and observing the result as well as batch mode where different files were read in and the resulting games of life monitored. Some changes that were made as a result of the tests included providing error messaging for invalid file inputs, and checking if the coordinates input for a cell fell within the board's boundaries. I also noticed that some of the predicted behavior of certain formations did not always follow expectations because of the wall affects. Certain formations would begin to travel out of bounds only to hit a wall and become stable still lifes. These still lifes would then interact with other moving cells in later generations which prolonged or shortened the overall life of a game. One possible improvement would be to enlarge the board to allow formations to leave entirely, but only display a certain segment.

